#!/bin/bash

# ===================================
# SCRIPT DE DEPLOY EM PRODU√á√ÉO
# ===================================

set -e  # Parar em caso de erro

echo "üöÄ Iniciando deploy em produ√ß√£o..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.production.yml" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Erro: Docker n√£o est√° rodando"
    exit 1
fi

# Parar containers existentes
echo "üõë Parando containers existentes..."
docker-compose -f docker-compose.production.yml down --remove-orphans || true

# Limpar imagens antigas (opcional)
echo "üßπ Limpando imagens antigas..."
docker system prune -f || true

# Build das imagens
echo "üî® Construindo imagens Docker..."
docker-compose -f docker-compose.production.yml build --no-cache

# Verificar se os arquivos .env.production existem
if [ ! -f "backend/.env.production" ]; then
    echo "‚ùå Erro: Arquivo backend/.env.production n√£o encontrado"
    echo "üìù Copie backend/.env.example para backend/.env.production e configure"
    exit 1
fi

if [ ! -f "frontend/.env.production" ]; then
    echo "‚ùå Erro: Arquivo frontend/.env.production n√£o encontrado"
    echo "üìù Copie frontend/.env.example para frontend/.env.production e configure"
    exit 1
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p logs uploads ssl backups
chmod 755 logs uploads backups

# Iniciar containers
echo "üöÄ Iniciando containers..."
docker-compose -f docker-compose.production.yml up -d

# Aguardar containers iniciarem
echo "‚è≥ Aguardando containers iniciarem..."
sleep 30

# Verificar status dos containers
echo "üìä Verificando status dos containers..."
docker-compose -f docker-compose.production.yml ps

# Verificar logs
echo "üìã √öltimos logs do backend:"
docker-compose -f docker-compose.production.yml logs --tail=20 backend

echo "üìã √öltimos logs do frontend:"
docker-compose -f docker-compose.production.yml logs --tail=20 frontend

# Verificar sa√∫de dos servi√ßos
echo "üè• Verificando sa√∫de dos servi√ßos..."
sleep 10

# Teste de conectividade
echo "üîç Testando conectividade..."
if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
    echo "‚úÖ Backend est√° respondendo"
else
    echo "‚ö†Ô∏è  Backend n√£o est√° respondendo - verifique os logs"
fi

if curl -f http://localhost/ > /dev/null 2>&1; then
    echo "‚úÖ Frontend est√° respondendo"
else
    echo "‚ö†Ô∏è  Frontend n√£o est√° respondendo - verifique os logs"
fi

echo ""
echo "üéâ Deploy conclu√≠do!"
echo ""
echo "üìç URLs de acesso:"
echo "   Frontend: http://localhost/ (ou https://seu-dominio.com)"
echo "   Backend:  http://localhost:3001 (ou https://api.seu-dominio.com)"
echo ""
echo "üìã Comandos √∫teis:"
echo "   Ver logs:      docker-compose -f docker-compose.production.yml logs -f"
echo "   Parar:         docker-compose -f docker-compose.production.yml down"
echo "   Reiniciar:     docker-compose -f docker-compose.production.yml restart"
echo "   Status:        docker-compose -f docker-compose.production.yml ps"
echo ""
echo "‚ö†Ô∏è  Lembre-se de:"
echo "   1. Configurar SSL/HTTPS para produ√ß√£o"
echo "   2. Configurar backup autom√°tico"
echo "   3. Monitorar logs e performance"
echo "   4. Configurar dom√≠nio e DNS"
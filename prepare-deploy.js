#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

console.log('üöÄ Preparando projeto para deploy...')

// Verificar se os arquivos necess√°rios existem
const requiredFiles = [
  'backend/package.json',
  'backend/src/server.js',
  'backend/.env.production',
  'frontend/package.json',
  'frontend/dist/index.html'
]

console.log('\nüìã Verificando arquivos necess√°rios...')
let allFilesExist = true

requiredFiles.forEach(file => {
  const fullPath = path.join(__dirname, file)
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${file}`)
  } else {
    console.log(`‚ùå ${file} - FALTANDO!`)
    allFilesExist = false
  }
})

if (!allFilesExist) {
  console.log('\n‚ùå Alguns arquivos necess√°rios est√£o faltando!')
  console.log('Execute: npm run build no frontend')
  process.exit(1)
}

// Verificar build do frontend
const distPath = path.join(__dirname, 'frontend/dist')
if (!fs.existsSync(distPath)) {
  console.log('\n‚ùå Build do frontend n√£o encontrado!')
  console.log('Execute: cd frontend && npm run build')
  process.exit(1)
}

// Criar .gitignore se n√£o existir
const gitignorePath = path.join(__dirname, '.gitignore')
const gitignoreContent = `
# Dependencies
node_modules/
*/node_modules/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
dist/
build/

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Uploads
uploads/*
!uploads/.gitkeep

# Backups
backups/*
!backups/.gitkeep

# SSL certificates
ssl/*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# PM2
.pm2/
`

if (!fs.existsSync(gitignorePath)) {
  fs.writeFileSync(gitignorePath, gitignoreContent.trim())
  console.log('‚úÖ .gitignore criado')
}

// Verificar package.json do backend
const backendPackagePath = path.join(__dirname, 'backend/package.json')
const backendPackage = JSON.parse(fs.readFileSync(backendPackagePath, 'utf8'))

if (!backendPackage.scripts.start) {
  console.log('‚ùå Script "start" n√£o encontrado no backend/package.json')
  process.exit(1)
}

console.log('\nüéâ Projeto pronto para deploy!')
console.log('\nüìã Pr√≥ximos passos:')
console.log('1. Criar reposit√≥rio no GitHub')
console.log('2. Fazer push do c√≥digo')
console.log('3. Conectar Railway (backend)')
console.log('4. Conectar Vercel (frontend)')
console.log('5. Configurar vari√°veis de ambiente')

console.log('\nüîó Links √∫teis:')
console.log('‚Ä¢ Railway: https://railway.app')
console.log('‚Ä¢ Vercel: https://vercel.com')
console.log('‚Ä¢ GitHub: https://github.com')

console.log('\nüìÑ Documenta√ß√£o: DEPLOY-GUIDE.md')
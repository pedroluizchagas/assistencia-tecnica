#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o das Configura√ß√µes Supabase
 * 
 * Este script verifica se todas as vari√°veis de ambiente necess√°rias
 * est√£o configuradas corretamente para o Render.
 */

require('dotenv').config()

console.log('üîç Verificando Configura√ß√µes Supabase para Render...\n')

// Vari√°veis obrigat√≥rias
const requiredVars = {
  'NODE_ENV': process.env.NODE_ENV,
  'SUPABASE_URL': process.env.SUPABASE_URL,
  'SUPABASE_SERVICE_ROLE_KEY': process.env.SUPABASE_SERVICE_ROLE_KEY
}

// Vari√°veis que N√ÉO devem estar presentes
const deprecatedVars = {
  'DATABASE_TYPE': process.env.DATABASE_TYPE
}

let allGood = true

// Verificar vari√°veis obrigat√≥rias
console.log('‚úÖ Verificando Vari√°veis Obrigat√≥rias:')
for (const [key, value] of Object.entries(requiredVars)) {
  if (value) {
    if (key === 'SUPABASE_SERVICE_ROLE_KEY') {
      console.log(`   ${key}: ‚úÖ Configurado (${value.substring(0, 20)}...)`)
    } else {
      console.log(`   ${key}: ‚úÖ ${value}`)
    }
  } else {
    console.log(`   ${key}: ‚ùå N√ÉO CONFIGURADO`)
    allGood = false
  }
}

// Verificar vari√°veis depreciadas
console.log('\nüóëÔ∏è  Verificando Vari√°veis Depreciadas:')
for (const [key, value] of Object.entries(deprecatedVars)) {
  if (value) {
    console.log(`   ${key}: ‚ö†Ô∏è  AINDA PRESENTE (deve ser removida)`)
    allGood = false
  } else {
    console.log(`   ${key}: ‚úÖ Removida corretamente`)
  }
}

// Verificar se est√° usando apenas SERVICE_ROLE_KEY
console.log('\nüîê Verificando Configura√ß√£o de Seguran√ßa:')
if (process.env.SUPABASE_ANON_KEY && !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.log('   ‚ùå ERRO: Usando ANON_KEY em vez de SERVICE_ROLE_KEY no backend!')
  allGood = false
} else if (process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.log('   ‚úÖ Usando SERVICE_ROLE_KEY corretamente')
} else {
  console.log('   ‚ùå ERRO: Nenhuma chave Supabase configurada!')
  allGood = false
}

// Testar conex√£o com Supabase
console.log('\nüîå Testando Conex√£o com Supabase:')
try {
  const { createClient } = require('@supabase/supabase-js')
  
  if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )
    
    console.log('   ‚úÖ Cliente Supabase criado com sucesso')
    console.log('   ‚úÖ SERVICE ROLE ok')
  } else {
    console.log('   ‚ùå N√£o foi poss√≠vel criar cliente Supabase')
    allGood = false
  }
} catch (error) {
  console.log(`   ‚ùå Erro ao criar cliente Supabase: ${error.message}`)
  allGood = false
}

// Resultado final
console.log('\n' + '='.repeat(50))
if (allGood) {
  console.log('üéâ SUCESSO: Todas as configura√ß√µes est√£o corretas!')
  console.log('‚úÖ Pronto para deploy no Render')
  console.log('\nüìã Pr√≥ximos passos:')
  console.log('   1. Configure as vari√°veis no Render Dashboard')
  console.log('   2. Fa√ßa deploy do c√≥digo')
  console.log('   3. Verifique os logs: "‚úÖ SERVICE ROLE ok"')
  console.log('   4. Teste o health check: /api/health')
  process.exit(0)
} else {
  console.log('‚ùå ERRO: Algumas configura√ß√µes precisam ser corrigidas!')
  console.log('\nüìã A√ß√µes necess√°rias:')
  console.log('   1. Configure as vari√°veis obrigat√≥rias')
  console.log('   2. Remova vari√°veis depreciadas')
  console.log('   3. Execute este script novamente')
  process.exit(1)
}
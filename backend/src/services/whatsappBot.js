const db = require('../utils/database-adapter')
const { LoggerManager } = require('../utils/logger')

class WhatsAppBot {
  constructor() {
    this.commands = this.setupCommands()
    this.conversations = new Map() // Para manter contexto das conversas
    this.businessHours = {
      start: 8,
      end: 18,
      days: [1, 2, 3, 4, 5, 6], // Segunda a s√°bado
    }
  }

  setupCommands() {
    return {
      oi: 'greeting',
      ol√°: 'greeting',
      ola: 'greeting',
      'bom dia': 'greeting',
      'boa tarde': 'greeting',
      'boa noite': 'greeting',
      menu: 'menu',
      ajuda: 'menu',
      status: 'checkStatus',
      consultar: 'checkStatus',
      or√ßamento: 'requestQuote',
      orcamento: 'requestQuote',
      pre√ßo: 'requestQuote',
      preco: 'requestQuote',
      localiza√ß√£o: 'location',
      localizacao: 'location',
      endere√ßo: 'location',
      endereco: 'location',
      hor√°rio: 'businessHours',
      horario: 'businessHours',
      contato: 'contact',
      telefone: 'contact',
      whatsapp: 'contact',
      atendimento: 'humanSupport',
      'falar com': 'humanSupport',
      t√©cnico: 'humanSupport',
      tecnico: 'humanSupport',
    }
  }

  async processMessage(message) {
    try {
      const contact = await message.getContact()
      const messageText = message.body.toLowerCase().trim()
      const phoneNumber = contact.number

      // Verificar se √© cliente cadastrado
      const cliente = await this.getClienteByPhone(phoneNumber)

      // Verificar hor√°rio comercial
      const isBusinessHours = this.isBusinessHours()

      // Analisar inten√ß√£o da mensagem
      const intent = this.detectIntent(messageText)

      // Processar baseado na inten√ß√£o
      let response = ''

      switch (intent) {
        case 'greeting':
          response = await this.handleGreeting(cliente, isBusinessHours)
          break

        case 'menu':
          response = this.getMenu()
          break

        case 'checkStatus':
          response = await this.handleStatusCheck(cliente, messageText)
          break

        case 'requestQuote':
          response = await this.handleQuoteRequest(cliente)
          break

        case 'location':
          response = this.getLocationInfo()
          break

        case 'businessHours':
          response = this.getBusinessHoursInfo()
          break

        case 'contact':
          response = this.getContactInfo()
          break

        case 'humanSupport':
          response = await this.handleHumanSupport(cliente, isBusinessHours)
          break

        default:
          response = await this.handleUnknownMessage(
            cliente,
            messageText,
            isBusinessHours
          )
      }

      // Registrar intera√ß√£o
      await this.logInteraction(
        phoneNumber,
        cliente?.id,
        messageText,
        response,
        intent
      )

      return response
    } catch (error) {
      LoggerManager.error('‚ùå Erro no processamento do bot:', error)
      return this.getErrorMessage()
    }
  }

  detectIntent(messageText) {
    // Verificar comandos diretos
    for (const [keyword, intent] of Object.entries(this.commands)) {
      if (messageText.includes(keyword)) {
        return intent
      }
    }

    // Verificar padr√µes espec√≠ficos
    if (messageText.match(/ordem|os|n√∫mero|numero|\d+/)) {
      return 'checkStatus'
    }

    if (messageText.match(/quanto|valor|pre√ßo|preco|custo/)) {
      return 'requestQuote'
    }

    if (messageText.match(/onde|local|endere√ßo|endereco|fica/)) {
      return 'location'
    }

    if (messageText.match(/hor√°rio|horario|funciona|abre|fecha/)) {
      return 'businessHours'
    }

    return 'unknown'
  }

  async handleGreeting(cliente, isBusinessHours) {
    const nomeCliente = cliente ? cliente.nome.split(' ')[0] : 'cliente'
    const horaAtual = new Date().getHours()

    let saudacao = 'üëã'
    if (horaAtual < 12) saudacao = 'Bom dia'
    else if (horaAtual < 18) saudacao = 'Boa tarde'
    else saudacao = 'Boa noite'

    if (!isBusinessHours) {
      return `${saudacao}${
        cliente ? `, ${nomeCliente}` : ''
      }! üåô\n\nüîß *Saymon Cell* - Assist√™ncia T√©cnica\n\n‚è∞ No momento estamos *fora do hor√°rio comercial*.\n\nNosso atendimento √©:\nüìÖ Segunda a S√°bado\nüïó 8h √†s 18h\n\nEm breve retornaremos seu contato! üòä\n\nPara emerg√™ncias, digite *URGENTE*`
    }

    let ordensAbertas = ''
    if (cliente) {
      const ordens = await this.getClienteOrdens(cliente.id)
      if (ordens.length > 0) {
        ordensAbertas = `\n\nüìã Voc√™ tem *${ordens.length} ordem(s)* em andamento.\nDigite *STATUS* para consultar.`
      }
    }

    return `${saudacao}${
      cliente ? `, ${nomeCliente}` : ''
    }! üëã\n\nüîß *Saymon Cell* - Assist√™ncia T√©cnica\n\nComo posso ajud√°-lo hoje?\n\n${this.getQuickMenu()}${ordensAbertas}`
  }

  getMenu() {
    return `üì± *Menu de Atendimento*\n\n*Op√ß√µes dispon√≠veis:*\n\n1Ô∏è‚É£ Consultar *STATUS* da ordem\n2Ô∏è‚É£ Solicitar *OR√áAMENTO*\n3Ô∏è‚É£ Ver nossa *LOCALIZA√á√ÉO*\n4Ô∏è‚É£ Hor√°rio de *FUNCIONAMENTO*\n5Ô∏è‚É£ Falar com *ATENDIMENTO*\n\nüí° *Dica:* Digite a palavra destacada para acesso r√°pido!\n\nEx: Digite "status" para consultar sua ordem`
  }

  getQuickMenu() {
    return `*Menu R√°pido:*\n‚Ä¢ STATUS - Consultar ordem\n‚Ä¢ OR√áAMENTO - Solicitar or√ßamento\n‚Ä¢ LOCALIZA√á√ÉO - Nosso endere√ßo\n‚Ä¢ MENU - Ver todas op√ß√µes`
  }

  async handleStatusCheck(cliente, messageText) {
    if (!cliente) {
      return `Para consultar o status, preciso que voc√™ seja um cliente cadastrado.\n\nüìû Entre em contato conosco:\n*${this.getContactInfo()}*\n\nOu digite *ATENDIMENTO* para falar conosco.`
    }

    // Verificar se mencionou n√∫mero da ordem
    const ordemMatch = messageText.match(/\d+/)

    if (ordemMatch) {
      const ordemId = parseInt(ordemMatch[0])
      return await this.getOrdemStatus(cliente.id, ordemId)
    }

    // Listar todas as ordens do cliente
    const ordens = await this.getClienteOrdens(cliente.id)

    if (ordens.length === 0) {
      return `${
        cliente.nome.split(' ')[0]
      }, voc√™ n√£o possui ordens de servi√ßo em nosso sistema no momento. ü§î\n\nGostaria de solicitar um or√ßamento? Digite *OR√áAMENTO*`
    }

    let response = `üìã *Suas Ordens de Servi√ßo:*\n\n`

    ordens.forEach((ordem, index) => {
      const statusIcon = this.getStatusIcon(ordem.status)
      const statusText = this.getStatusText(ordem.status)

      response += `${index + 1}. üì± *${ordem.equipamento}*\n`
      response += `   ${statusIcon} ${statusText}\n`
      response += `   üìÖ Entrada: ${this.formatDate(ordem.data_entrada)}\n`

      if (ordem.valor_final > 0) {
        response += `   üí∞ Valor: R$ ${ordem.valor_final.toFixed(2)}\n`
      }

      response += `\n`
    })

    response += `üí° *Dica:* Digite "STATUS ${ordens[0].id}" para detalhes espec√≠ficos`

    return response
  }

  async handleQuoteRequest(cliente) {
    const nomeCliente = cliente ? cliente.nome.split(' ')[0] : 'cliente'

    return `üí∞ *Or√ßamento Gratuito*\n\nOl√°${
      cliente ? ` ${nomeCliente}` : ''
    }! Para fazer um or√ßamento preciso, preciso de algumas informa√ß√µes:\n\nüì± *Qual o problema do seu aparelho?*\n‚Ä¢ Tela quebrada\n‚Ä¢ N√£o liga\n‚Ä¢ Problema na bateria\n‚Ä¢ N√£o carrega\n‚Ä¢ Outro problema\n\nüìù *Descreva o defeito:*\nConte-me em detalhes o que est√° acontecendo.\n\nüì∏ *Foto (opcional):*\nSe poss√≠vel, envie uma foto do aparelho.\n\nüë§ *Atendimento Personalizado:*\nDigite *ATENDIMENTO* para falar diretamente com nosso t√©cnico.`
  }

  getLocationInfo() {
    return `üìç *Nossa Localiza√ß√£o*\n\nüîß *Saymon Cell*\nAssist√™ncia T√©cnica de Celulares\n\nüìß Endere√ßo:\n[Seu endere√ßo completo aqui]\n\nüöó Como chegar:\n[Pontos de refer√™ncia]\n\nüÖøÔ∏è Estacionamento dispon√≠vel\n\nüì± WhatsApp: ${this.getContactInfo()}\n\nüó∫Ô∏è Para ver no mapa, clique no link:\n[Link do Google Maps]`
  }

  getBusinessHoursInfo() {
    return `‚è∞ *Hor√°rio de Funcionamento*\n\nüìÖ *Segunda a S√°bado*\nüïó 8h00 √†s 18h00\n\nüö´ *Domingo*\nFechado\n\nüì± *Atendimento WhatsApp:*\nMesmo hor√°rio da loja\n\nüÜò *Emerg√™ncias:*\nApenas casos urgentes\n(Digite URGENTE)\n\nüí° Fora do hor√°rio, suas mensagens ser√£o respondidas no pr√≥ximo dia √∫til!`
  }

  getContactInfo() {
    return `üìû *Entre em Contato*\n\nüì± WhatsApp: (37) 9 9999-9999\n‚òéÔ∏è Fixo: (37) 3333-3333\nüìß Email: contato@saymon-cell.com\n\nüîß *Saymon Cell*\nAssist√™ncia T√©cnica Especializada\n\n‚ö° Resposta r√°pida pelo WhatsApp!`
  }

  async handleHumanSupport(cliente, isBusinessHours) {
    if (!isBusinessHours) {
      return `üåô *Atendimento Humano*\n\nNo momento estamos fora do hor√°rio comercial.\n\n‚è∞ *Nosso hor√°rio:*\nüìÖ Segunda a S√°bado\nüïó 8h √†s 18h\n\nüìù Deixe sua mensagem que retornaremos em breve!\n\nPara *emerg√™ncias*, digite URGENTE`
    }

    // Marcar para atendimento humano
    await this.flagForHumanSupport(cliente)

    return `üë§ *Conectando ao Atendimento*\n\nOl√°${
      cliente ? ` ${cliente.nome.split(' ')[0]}` : ''
    }!\n\nEm instantes um de nossos atendentes entrar√° em contato.\n\n‚è±Ô∏è Tempo m√©dio de resposta: 2-5 minutos\n\nüîß *Saymon Cell* - Atendimento Especializado`
  }

  async handleUnknownMessage(cliente, messageText, isBusinessHours) {
    if (!isBusinessHours) {
      return `üåô Recebemos sua mensagem!\n\nRetornaremos no pr√≥ximo hor√°rio comercial:\nüìÖ Segunda a S√°bado, 8h √†s 18h\n\nPara o *menu*, digite MENU\nPara *emerg√™ncias*, digite URGENTE`
    }

    // Tentar interpretar com IA b√°sica
    if (messageText.length > 50) {
      // Mensagem longa - prov√°vel descri√ß√£o de problema
      await this.flagForHumanSupport(cliente)
      return `üìù *Mensagem Recebida!*\n\nEntendi que voc√™ est√° descrevendo um problema detalhado.\n\nUm t√©cnico especializado analisar√° sua mensagem e retornar√° em breve!\n\n‚è±Ô∏è Tempo m√©dio: 5-10 minutos\n\nEnquanto isso, digite *MENU* para ver outras op√ß√µes.`
    }

    return `ü§î N√£o entendi sua solicita√ß√£o.\n\n${this.getQuickMenu()}\n\nOu digite *ATENDIMENTO* para falar com nossa equipe.`
  }

  // M√©todos auxiliares
  async getClienteByPhone(phoneNumber) {
    try {
      return await db.get('SELECT * FROM clientes WHERE telefone LIKE ?', [
        `%${phoneNumber}%`,
      ])
    } catch (error) {
      LoggerManager.error('‚ùå Erro ao buscar cliente:', error)
      return null
    }
  }

  async getClienteOrdens(clienteId) {
    try {
      return await db.all(
        `
        SELECT id, equipamento, defeito_relatado as defeito, status, data_entrada, 
               valor_orcamento, valor_final, data_prazo
        FROM ordens 
        WHERE cliente_id = ? AND status != 'entregue'
        ORDER BY data_entrada DESC
        LIMIT 10
      `,
        [clienteId]
      )
    } catch (error) {
      LoggerManager.error('‚ùå Erro ao buscar ordens:', error)
      return []
    }
  }

  async getOrdemStatus(clienteId, ordemId) {
    try {
      const ordem = await db.get(
        `
        SELECT o.*, c.nome as cliente_nome
        FROM ordens o
        JOIN clientes c ON o.cliente_id = c.id
        WHERE o.id = ? AND o.cliente_id = ?
      `,
        [ordemId, clienteId]
      )

      if (!ordem) {
        return `‚ùå Ordem #${ordemId} n√£o encontrada ou n√£o pertence a voc√™.`
      }

      const statusIcon = this.getStatusIcon(ordem.status)
      const statusText = this.getStatusText(ordem.status)

      let response = `üìã *Ordem de Servi√ßo #${ordem.id}*\n\n`
      response += `üì± *Equipamento:* ${ordem.equipamento}\n`
      response += `üîß *Defeito:* ${ordem.defeito}\n`
      response += `${statusIcon} *Status:* ${statusText}\n`
      response += `üìÖ *Entrada:* ${this.formatDate(ordem.data_entrada)}\n`

      if (ordem.data_prazo) {
        response += `‚è∞ *Prazo:* ${this.formatDate(ordem.data_prazo)}\n`
      }

      if (ordem.valor_orcamento > 0) {
        response += `üí∞ *Or√ßamento:* R$ ${ordem.valor_orcamento.toFixed(2)}\n`
      }

      if (
        ordem.valor_final > 0 &&
        ordem.valor_final !== ordem.valor_orcamento
      ) {
        response += `üíµ *Valor Final:* R$ ${ordem.valor_final.toFixed(2)}\n`
      }

      if (ordem.diagnostico) {
        response += `üîç *Diagn√≥stico:* ${ordem.diagnostico}\n`
      }

      if (ordem.observacoes) {
        response += `üìù *Observa√ß√µes:* ${ordem.observacoes}\n`
      }

      // Adicionar pr√≥ximos passos baseado no status
      response += this.getNextStepsForStatus(ordem.status)

      return response
    } catch (error) {
      LoggerManager.error('‚ùå Erro ao buscar status da ordem:', error)
      return this.getErrorMessage()
    }
  }

  getStatusIcon(status) {
    const icons = {
      recebido: 'üì•',
      em_analise: 'üîç',
      aguardando_pecas: '‚è≥',
      em_reparo: 'üîß',
      pronto: '‚úÖ',
      entregue: 'üì¶',
      cancelado: '‚ùå',
    }
    return icons[status] || 'üìã'
  }

  getStatusText(status) {
    const texts = {
      recebido: 'Recebido',
      em_analise: 'Em An√°lise',
      aguardando_pecas: 'Aguardando Pe√ßas',
      em_reparo: 'Em Reparo',
      pronto: 'Pronto para Retirada',
      entregue: 'Entregue',
      cancelado: 'Cancelado',
    }
    return texts[status] || 'Status Desconhecido'
  }

  getNextStepsForStatus(status) {
    const steps = {
      recebido:
        '\n\n‚è≥ *Pr√≥ximo passo:* An√°lise t√©cnica\nüïê Tempo estimado: 1-2 dias √∫teis',
      em_analise:
        '\n\nüîç *Pr√≥ximo passo:* Diagn√≥stico completo\nüïê Tempo estimado: 1 dia √∫til',
      aguardando_pecas:
        '\n\nüì¶ *Pr√≥ximo passo:* Chegada das pe√ßas\nüïê Tempo estimado: 3-7 dias √∫teis',
      em_reparo:
        '\n\nüîß *Pr√≥ximo passo:* Finaliza√ß√£o do reparo\nüïê Tempo estimado: 1-2 dias √∫teis',
      pronto:
        '\n\nüéâ *Seu aparelho est√° pronto!*\nüìç Pode retirar em nossa loja\n‚è∞ Hor√°rio: 8h √†s 18h',
      entregue: '\n\n‚úÖ *Servi√ßo conclu√≠do!*\nüõ°Ô∏è Garantia: 90 dias',
      cancelado: '\n\n‚ùå *Ordem cancelada*\nPara d√∫vidas, entre em contato.',
    }
    return steps[status] || ''
  }

  isBusinessHours() {
    const now = new Date()
    const day = now.getDay() // 0 = domingo, 1 = segunda, ...
    const hour = now.getHours()

    return (
      this.businessHours.days.includes(day) &&
      hour >= this.businessHours.start &&
      hour < this.businessHours.end
    )
  }

  formatDate(dateString) {
    const date = new Date(dateString)
    return date.toLocaleDateString('pt-BR')
  }

  async flagForHumanSupport(cliente) {
    try {
      await db.run(
        `
        INSERT INTO whatsapp_human_queue (
          cliente_id, phone_number, status, created_at
        ) VALUES (?, ?, 'waiting', CURRENT_TIMESTAMP)
      `,
        [cliente?.id, cliente?.telefone]
      )
    } catch (error) {
      LoggerManager.error('‚ùå Erro ao marcar para atendimento humano:', error)
    }
  }

  async logInteraction(
    phoneNumber,
    clienteId,
    messageReceived,
    messageResponse,
    intent
  ) {
    try {
      await db.run(
        `
        INSERT INTO whatsapp_interactions (
          cliente_id, phone_number, message_received, message_response, 
          intent, created_at
        ) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
      `,
        [clienteId, phoneNumber, messageReceived, messageResponse, intent]
      )
    } catch (error) {
      LoggerManager.error('‚ùå Erro ao registrar intera√ß√£o:', error)
    }
  }

  getErrorMessage() {
    return `üòÖ Ops! Algo deu errado por aqui.\n\nTente novamente ou digite *ATENDIMENTO* para falar com nossa equipe.\n\nüîß *Saymon Cell* - Sempre prontos para ajudar!`
  }
}

module.exports = WhatsAppBot
